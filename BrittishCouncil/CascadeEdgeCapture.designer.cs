#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrittishCouncil
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LocalEventDatabase")]
	public partial class CascadeEdgeCaptureDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTableLocalAdmin(TableLocalAdmin instance);
    partial void UpdateTableLocalAdmin(TableLocalAdmin instance);
    partial void DeleteTableLocalAdmin(TableLocalAdmin instance);
    partial void InsertTableLocalEvent(TableLocalEvent instance);
    partial void UpdateTableLocalEvent(TableLocalEvent instance);
    partial void DeleteTableLocalEvent(TableLocalEvent instance);
    #endregion
		
		public CascadeEdgeCaptureDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LocalEventDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CascadeEdgeCaptureDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CascadeEdgeCaptureDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CascadeEdgeCaptureDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CascadeEdgeCaptureDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TableLocalAdmin> TableLocalAdmins
		{
			get
			{
				return this.GetTable<TableLocalAdmin>();
			}
		}
		
		public System.Data.Linq.Table<TableLocalEvent> TableLocalEvents
		{
			get
			{
				return this.GetTable<TableLocalEvent>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableLocalAdmins")]
	public partial class TableLocalAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LocalAdminUsername;
		
		private string _LocalAdminPassword;
		
		private string _LocalAdminFName;
		
		private string _LocalAdminLName;
		
		private string _LocalAdminEmail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLocalAdminUsernameChanging(string value);
    partial void OnLocalAdminUsernameChanged();
    partial void OnLocalAdminPasswordChanging(string value);
    partial void OnLocalAdminPasswordChanged();
    partial void OnLocalAdminFNameChanging(string value);
    partial void OnLocalAdminFNameChanged();
    partial void OnLocalAdminLNameChanging(string value);
    partial void OnLocalAdminLNameChanged();
    partial void OnLocalAdminEmailChanging(string value);
    partial void OnLocalAdminEmailChanged();
    #endregion
		
		public TableLocalAdmin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalAdminUsername", DbType="VarChar(50)")]
		public string LocalAdminUsername
		{
			get
			{
				return this._LocalAdminUsername;
			}
			set
			{
				if ((this._LocalAdminUsername != value))
				{
					this.OnLocalAdminUsernameChanging(value);
					this.SendPropertyChanging();
					this._LocalAdminUsername = value;
					this.SendPropertyChanged("LocalAdminUsername");
					this.OnLocalAdminUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalAdminPassword", DbType="VarChar(25)")]
		public string LocalAdminPassword
		{
			get
			{
				return this._LocalAdminPassword;
			}
			set
			{
				if ((this._LocalAdminPassword != value))
				{
					this.OnLocalAdminPasswordChanging(value);
					this.SendPropertyChanging();
					this._LocalAdminPassword = value;
					this.SendPropertyChanged("LocalAdminPassword");
					this.OnLocalAdminPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalAdminFName", DbType="VarChar(100)")]
		public string LocalAdminFName
		{
			get
			{
				return this._LocalAdminFName;
			}
			set
			{
				if ((this._LocalAdminFName != value))
				{
					this.OnLocalAdminFNameChanging(value);
					this.SendPropertyChanging();
					this._LocalAdminFName = value;
					this.SendPropertyChanged("LocalAdminFName");
					this.OnLocalAdminFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalAdminLName", DbType="VarChar(100)")]
		public string LocalAdminLName
		{
			get
			{
				return this._LocalAdminLName;
			}
			set
			{
				if ((this._LocalAdminLName != value))
				{
					this.OnLocalAdminLNameChanging(value);
					this.SendPropertyChanging();
					this._LocalAdminLName = value;
					this.SendPropertyChanged("LocalAdminLName");
					this.OnLocalAdminLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalAdminEmail", DbType="VarChar(100)")]
		public string LocalAdminEmail
		{
			get
			{
				return this._LocalAdminEmail;
			}
			set
			{
				if ((this._LocalAdminEmail != value))
				{
					this.OnLocalAdminEmailChanging(value);
					this.SendPropertyChanging();
					this._LocalAdminEmail = value;
					this.SendPropertyChanged("LocalAdminEmail");
					this.OnLocalAdminEmailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableLocalEvents")]
	public partial class TableLocalEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LocalCustomerID;
		
		private string _LocalEventID;
		
		private string _LocalEventName;
		
		private string _LocalEventDescription;
		
		private string _LocalEventSite;
		
		private System.Nullable<int> _LocalEventStatus;
		
		private string _LocalEventReleaseDate;
		
		private System.Nullable<System.DateTime> _LocalEventDateCreated;
		
		private System.Nullable<System.DateTime> _LocalEventDateModified;
		
		private string _LocalAssetFileName;
		
		private string _LocalAssetID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLocalCustomerIDChanging(string value);
    partial void OnLocalCustomerIDChanged();
    partial void OnLocalEventIDChanging(string value);
    partial void OnLocalEventIDChanged();
    partial void OnLocalEventNameChanging(string value);
    partial void OnLocalEventNameChanged();
    partial void OnLocalEventDescriptionChanging(string value);
    partial void OnLocalEventDescriptionChanged();
    partial void OnLocalEventSiteChanging(string value);
    partial void OnLocalEventSiteChanged();
    partial void OnLocalEventStatusChanging(System.Nullable<int> value);
    partial void OnLocalEventStatusChanged();
    partial void OnLocalEventReleaseDateChanging(string value);
    partial void OnLocalEventReleaseDateChanged();
    partial void OnLocalEventDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLocalEventDateCreatedChanged();
    partial void OnLocalEventDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLocalEventDateModifiedChanged();
    partial void OnLocalAssetFileNameChanging(string value);
    partial void OnLocalAssetFileNameChanged();
    partial void OnLocalAssetIDChanging(string value);
    partial void OnLocalAssetIDChanged();
    #endregion
		
		public TableLocalEvent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalCustomerID", DbType="VarChar(200)")]
		public string LocalCustomerID
		{
			get
			{
				return this._LocalCustomerID;
			}
			set
			{
				if ((this._LocalCustomerID != value))
				{
					this.OnLocalCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._LocalCustomerID = value;
					this.SendPropertyChanged("LocalCustomerID");
					this.OnLocalCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventID", DbType="VarChar(200)")]
		public string LocalEventID
		{
			get
			{
				return this._LocalEventID;
			}
			set
			{
				if ((this._LocalEventID != value))
				{
					this.OnLocalEventIDChanging(value);
					this.SendPropertyChanging();
					this._LocalEventID = value;
					this.SendPropertyChanged("LocalEventID");
					this.OnLocalEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventName", DbType="VarChar(MAX)")]
		public string LocalEventName
		{
			get
			{
				return this._LocalEventName;
			}
			set
			{
				if ((this._LocalEventName != value))
				{
					this.OnLocalEventNameChanging(value);
					this.SendPropertyChanging();
					this._LocalEventName = value;
					this.SendPropertyChanged("LocalEventName");
					this.OnLocalEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventDescription", DbType="VarChar(MAX)")]
		public string LocalEventDescription
		{
			get
			{
				return this._LocalEventDescription;
			}
			set
			{
				if ((this._LocalEventDescription != value))
				{
					this.OnLocalEventDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LocalEventDescription = value;
					this.SendPropertyChanged("LocalEventDescription");
					this.OnLocalEventDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventSite", DbType="VarChar(MAX)")]
		public string LocalEventSite
		{
			get
			{
				return this._LocalEventSite;
			}
			set
			{
				if ((this._LocalEventSite != value))
				{
					this.OnLocalEventSiteChanging(value);
					this.SendPropertyChanging();
					this._LocalEventSite = value;
					this.SendPropertyChanged("LocalEventSite");
					this.OnLocalEventSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventStatus", DbType="Int")]
		public System.Nullable<int> LocalEventStatus
		{
			get
			{
				return this._LocalEventStatus;
			}
			set
			{
				if ((this._LocalEventStatus != value))
				{
					this.OnLocalEventStatusChanging(value);
					this.SendPropertyChanging();
					this._LocalEventStatus = value;
					this.SendPropertyChanged("LocalEventStatus");
					this.OnLocalEventStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventReleaseDate", DbType="VarChar(50)")]
		public string LocalEventReleaseDate
		{
			get
			{
				return this._LocalEventReleaseDate;
			}
			set
			{
				if ((this._LocalEventReleaseDate != value))
				{
					this.OnLocalEventReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._LocalEventReleaseDate = value;
					this.SendPropertyChanged("LocalEventReleaseDate");
					this.OnLocalEventReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventDateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LocalEventDateCreated
		{
			get
			{
				return this._LocalEventDateCreated;
			}
			set
			{
				if ((this._LocalEventDateCreated != value))
				{
					this.OnLocalEventDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._LocalEventDateCreated = value;
					this.SendPropertyChanged("LocalEventDateCreated");
					this.OnLocalEventDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalEventDateModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LocalEventDateModified
		{
			get
			{
				return this._LocalEventDateModified;
			}
			set
			{
				if ((this._LocalEventDateModified != value))
				{
					this.OnLocalEventDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._LocalEventDateModified = value;
					this.SendPropertyChanged("LocalEventDateModified");
					this.OnLocalEventDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalAssetFileName", DbType="VarChar(200)")]
		public string LocalAssetFileName
		{
			get
			{
				return this._LocalAssetFileName;
			}
			set
			{
				if ((this._LocalAssetFileName != value))
				{
					this.OnLocalAssetFileNameChanging(value);
					this.SendPropertyChanging();
					this._LocalAssetFileName = value;
					this.SendPropertyChanged("LocalAssetFileName");
					this.OnLocalAssetFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalAssetID", DbType="VarChar(50)")]
		public string LocalAssetID
		{
			get
			{
				return this._LocalAssetID;
			}
			set
			{
				if ((this._LocalAssetID != value))
				{
					this.OnLocalAssetIDChanging(value);
					this.SendPropertyChanging();
					this._LocalAssetID = value;
					this.SendPropertyChanged("LocalAssetID");
					this.OnLocalAssetIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
